#version 330 core

layout(triangles) in;
layout(triangle_strip, max_vertices = 9) out;

uniform mat4 MVP;
uniform mat4 M_Matrix;
uniform vec3 cameraForward;

in vec2 UV_Pass[]; // Input variable is array, one value for each vertex
in vec3 normalPass[]; // Notice that name of out variable in vertex shader must match

smooth out vec3 normal; 
smooth out vec2 UV;

uniform float fBender; 

void main() 
{ 
  // calculate the normal matrix
  mat4 normalMatrix = transpose(inverse(M_Matrix));

  // Calculate the centroid point (just sum up all coordinates and divide by 3
  // You can see built-in variable gl_in here, notice adding normal multiplied by bender value
  vec3 vMiddle = (gl_in[0].gl_Position.xyz+gl_in[1].gl_Position.xyz+gl_in[2].gl_Position.xyz)/3.0+(normalPass[0]+normalPass[1]+normalPass[2])*fBender; 

  // Centroid coordinate is average of three as well
  vec2 vTexCoordMiddle = (UV_Pass[0]+UV_Pass[1]+UV_Pass[2])/3.0;

  // Transform normals of 3 triangle vertices with transform matrix and store them in this array
  vec3 vNormalTransformed[3]; 
  for(int i = 0; i < 3; i++) vNormalTransformed[i] = (vec4(normalPass[i], 1.0) * normalMatrix).xyz; 
   
  // Calculate centroid normal
  vec3 vNormalMiddle = (vNormalTransformed[0]+vNormalTransformed[1]+vNormalTransformed[2])/3.0; 

  // . . . 

  for(int i = 0; i < 3; i++) 
  { 
    // Emit first vertex
    vec3 vPos = gl_in[i].gl_Position.xyz; 
    gl_Position = MVP*vec4(vPos, 1.0); 
    normal = (vec4(vNormalTransformed[i], 1.0)).xyz; 
    UV = UV_Pass[i]; 
    EmitVertex(); 

    // Emit second vertex, that comes next in order
    vPos = gl_in[(i+1)%3].gl_Position.xyz; 
    gl_Position = MVP*vec4(vPos, 1.0); 
    normal = (vec4(vNormalTransformed[(i+1)%3], 1.0)).xyz; 
    UV = UV_Pass[(i+1)%3]; 
    EmitVertex(); 

    // Emit third vertex - the centroid
    gl_Position = MVP*vec4(vMiddle, 1.0); 
    normal = vNormalMiddle; 
    UV = vTexCoordMiddle; 
    EmitVertex(); 

    EndPrimitive(); 
  } 

} 