#version 330 core

layout(location = 0) in vec3 model_space_pos;
layout(location = 1) in vec3 vertex_color;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 normals;

out vec2 UV;
smooth out vec3 fragColor;

// model view projection matrix...
uniform mat4 MVP;

out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;

void main() {
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(model_space_pos, 1);
 
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(model_space_pos,1)).xyz;
 
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
 
	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
 
	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( V * M * vec4(normals,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.




	gl_Position = MVP * vec4(model_space_pos, 1);

	UV = vertexUV;
}


