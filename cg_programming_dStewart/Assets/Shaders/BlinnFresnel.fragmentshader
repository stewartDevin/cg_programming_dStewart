#version 330 core

in vec2 UV;
uniform sampler2D diffuseTexture0;
uniform sampler2D specularTexture0;

out vec4 color;
smooth in vec3 fragColor;

uniform float timer;
uniform vec3 lightDirection;

// model view projection matrix...
uniform mat4 MVP;
uniform mat4 M_Matrix;
uniform vec3 cameraForward;
uniform vec3 cameraPosition;

uniform vec2 diffuseTiling;

in vec3 normal;

vec4 emissiveColor;
vec4 ambientColor;
vec4 diffuseColor;
vec4 specularColor;
vec4 fresnelColor;

// yellow light
vec4 lightColor = vec4(1.0f, 0.988235f, 0.815686f, 1.0f);
// white light
vec4 whiteLightColor = vec4(1.0, 1.0, 1.0, 1.0);

float glow = 0.0f;
float objectAmbientReflect = 0.2f;
float diffuseIntensity;
float lineIntensity;

in vec4 positionWorldSpace;

///////////////////////
// light struct stuff

////////////////////////
// directional light 

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirLight dirLight;

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);  

////////////////////////
// point light

struct PointLight {    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
#define NR_POINT_LIGHTS 4  
uniform PointLight pointLights[NR_POINT_LIGHTS];

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

/////////////////////////////////////////////

/////////////////////////////////////////
// main function
void main() {
	/*
	///////////////////////////////////////////
	// OBJECT COLOR
	vec4 objectColor = clamp(texture2D( diffuseTexture0, UV * diffuseTiling ).rgba, 0.0f, 1.0f);
	vec4 specularTextureColor = texture2D( specularTexture0, UV * diffuseTiling ).rgba;

	////////////////////////////////////////////
	// EMISSIVE LIGHTING
	emissiveColor = objectColor * glow;

	////////////////////////////////////////////
	// AMBIENT LIGHTING
	ambientColor = objectAmbientReflect * objectColor * lightColor;

	///////////////////////////////////////////
	// DIFFUSE LIGHTING
	diffuseIntensity = clamp(dot(normalize(lightDirection), normalize(normal)), 0.0f, 1.0f);
	
	// SET DIFFUSE COLOR
	diffuseColor = diffuseIntensity * objectColor;

	//////////////////////////////////////////
	// SPECULAR LIGHTING
	vec3 reflectionVector = normalize(normalize(lightDirection) - (2.0f * normal * dot(normalize(lightDirection), normal)) * specularTextureColor.rgb);
	float specularIntensity = pow( clamp( dot(reflectionVector, normalize(cameraForward)), 0.0f, 1.0f), 50.0f) * diffuseIntensity;
	
	// SET SPECULAR COLOR
	//specularColor = objectColor * (1.0 - specularIntensity) + specularIntensity * whiteLightColor;
	specularColor =  specularIntensity * whiteLightColor;

	///////////////////////////////////////////
	// FRESNEL LIGHTING
	//float fcbias = 0.20373;
	float fcbias = 0.001;
	float facing = clamp(1.0 - max( dot( normalize(-cameraForward.xyz), normalize(normal)), 0.0f), 0.0f, 1.0f);
	float refl2Refr = max(fcbias + (1.0-fcbias) * pow(facing, 3.0f), 0);
	//fresnelColor = clamp(objectColor * refl2Refr, 0.0f, 1.0f);
	fresnelColor = clamp(whiteLightColor * refl2Refr, 0.0f, 1.0f);

	//////////////////////////////////////////////
	// ADD ALL LIGHTING TOGETHER AND SET COLOR
	//color = clamp(emissiveColor + ambientColor + diffuseColor + specularColor + fresnelColor, 0.0f, 1.0f);
	color = clamp(emissiveColor + ambientColor + diffuseColor + specularColor, 0.0f, 1.0f);
	//color = fresnelColor;

	color.a = 1.0f;
	*/

	// Properties
    vec3 norm = normalize(normal);
    vec3 viewDir = normalize(cameraPosition.xyz - positionWorldSpace.xyz);

	vec3 result = vec3(0.0, 0.0, 0.0);

    // Phase 1: Directional lighting
    result = CalcDirLight(dirLight, norm, viewDir);

    // Phase 2: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, positionWorldSpace.xyz, viewDir);    

    // Phase 3: Spot light
    //result += CalcSpotLight(spotLight, norm, positionWorldSpace.xyz, viewDir);    
    
    color = vec4(result, 1.0);

}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 200.0);
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(diffuseTexture0, UV * diffuseTiling));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(diffuseTexture0, UV * diffuseTiling));
    vec3 specular = light.specular * spec * vec3(1.0, 1.0, 1.0);
    return (ambient + diffuse + specular);
}  

// Calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 300.0);
    // Attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(diffuseTexture0, UV * diffuseTiling));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(diffuseTexture0, UV * diffuseTiling));
    vec3 specular = light.specular * spec * vec3(texture(diffuseTexture0, UV * diffuseTiling));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 